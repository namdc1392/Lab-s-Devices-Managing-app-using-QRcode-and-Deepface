import tkinter as tk
from tkinter import messagebox, ttk
from tkcalendar import DateEntry
import matplotlib.pyplot as plt
import seaborn as sns
import json
import os
from datetime import datetime, timedelta
import pandas as pd
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import asyncio
import telegram
import io

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn c√°c file d·ªØ li·ªáu
CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
DATA_FILE = os.path.join(CURRENT_DIR, "danh_sach_vat_dung.json")
HISTORY_FILE = os.path.join(CURRENT_DIR, "lich_su_quet.json")
CATEGORY_FILE = os.path.join(CURRENT_DIR, "danh_muc_loai_thiet_bi.json")
OUTPUT_CHART = os.path.join(CURRENT_DIR, "report_chart.png")
OUTPUT_PDF = os.path.join(CURRENT_DIR, "report.pdf")

class ReportGeneratorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("H·ªá Th·ªëng T·∫°o B√°o C√°o")
        self.root.geometry("800x600")
        self.root.resizable(False, False)
        self.root.configure(bg="#FFFFFF")

        # Khung ch√≠nh
        self.main_frame = tk.Frame(self.root, bg="#FFFFFF")
        self.main_frame.pack(padx=20, pady=20, fill=tk.BOTH, expand=True)

        # Ti√™u ƒë·ªÅ
        header_frame = tk.Frame(self.main_frame, bg="#003087")
        header_frame.pack(fill=tk.X)
        self.title_label = tk.Label(header_frame, 
                                  text="üìä T·∫°o B√°o C√°o v√† Bi·ªÉu ƒê·ªì", 
                                  font=("Arial", 16, "bold"), 
                                  bg="#003087", 
                                  fg="#FFFFFF")
        self.title_label.pack(pady=10)

        # Frame cho b·ªô l·ªçc
        self.filter_frame = tk.Frame(self.main_frame, bg="#FFFFFF")
        self.filter_frame.pack(fill=tk.X, pady=10)

        # Lo·∫°i b√°o c√°o
        tk.Label(self.filter_frame, text="Lo·∫°i b√°o c√°o:", font=("Arial", 11), bg="#FFFFFF").grid(row=0, column=0, sticky="e", padx=5, pady=5)
        self.report_type_combobox = ttk.Combobox(self.filter_frame, 
                                               values=[
                                                   "Bi·ªÉu ƒë·ªì Tr√≤n - Tr·∫°ng th√°i thi·∫øt b·ªã",
                                                   "Bi·ªÉu ƒë·ªì C·ªôt - S·ªë l∆∞·ª£ng theo lo·∫°i thi·∫øt b·ªã",
                                                   "Bi·ªÉu ƒë·ªì ƒê∆∞·ªùng - T·∫ßn su·∫•t qu√©t m√£"
                                               ], 
                                               width=30, 
                                               state="readonly")
        self.report_type_combobox.grid(row=0, column=1, sticky="w", padx=5, pady=5)
        self.report_type_combobox.set("Bi·ªÉu ƒë·ªì Tr√≤n - Tr·∫°ng th√°i thi·∫øt b·ªã")
        self.report_type_combobox.bind("<<ComboboxSelected>>", self.update_filters)

        # Kho·∫£ng th·ªùi gian (cho bi·ªÉu ƒë·ªì ƒë∆∞·ªùng)
        tk.Label(self.filter_frame, text="T·ª´ ng√†y:", font=("Arial", 11), bg="#FFFFFF").grid(row=1, column=0, sticky="e", padx=5, pady=5)
        self.start_date = DateEntry(self.filter_frame, width=12, background='darkblue', foreground='white', date_pattern='yyyy-mm-dd')
        self.start_date.set_date(datetime.now() - timedelta(days=30))
        self.start_date.grid(row=1, column=1, sticky="w", padx=5, pady=5)

        tk.Label(self.filter_frame, text="ƒê·∫øn ng√†y:", font=("Arial", 11), bg="#FFFFFF").grid(row=1, column=2, sticky="e", padx=5, pady=5)
        self.end_date = DateEntry(self.filter_frame, width=12, background='darkblue', foreground='white', date_pattern='yyyy-mm-dd')
        self.end_date.set_date(datetime.now())
        self.end_date.grid(row=1, column=3, sticky="w", padx=5, pady=5)

        # Lo·∫°i thi·∫øt b·ªã (cho bi·ªÉu ƒë·ªì c·ªôt)
        tk.Label(self.filter_frame, text="Lo·∫°i thi·∫øt b·ªã:", font=("Arial", 11), bg="#FFFFFF").grid(row=2, column=0, sticky="e", padx=5, pady=5)
        self.category_combobox = ttk.Combobox(self.filter_frame, width=30, state="readonly")
        self.category_combobox.grid(row=2, column=1, sticky="w", padx=5, pady=5)
        self.category_combobox['values'] = ["T·∫•t c·∫£"] + self.load_data(CATEGORY_FILE)
        self.category_combobox.set("T·∫•t c·∫£")

        # Tr·∫°ng th√°i thi·∫øt b·ªã (cho bi·ªÉu ƒë·ªì tr√≤n)
        tk.Label(self.filter_frame, text="Tr·∫°ng th√°i:", font=("Arial", 11), bg="#FFFFFF").grid(row=2, column=2, sticky="e", padx=5, pady=5)
        self.status_combobox = ttk.Combobox(self.filter_frame, 
                                          values=["T·∫•t c·∫£", "C√≥ s·∫µn", "ƒêang m∆∞·ª£n", "ƒêang b·∫£o tr√¨"], 
                                          width=15, 
                                          state="readonly")
        self.status_combobox.grid(row=2, column=3, sticky="w", padx=5, pady=5)
        self.status_combobox.set("T·∫•t c·∫£")

        # Frame cho n√∫t v√† thanh ti·∫øn tr√¨nh
        self.action_frame = tk.Frame(self.main_frame, bg="#FFFFFF")
        self.action_frame.pack(fill=tk.X, pady=10)

        # N√∫t hi·ªÉn th·ªã s·ªë li·ªáu
        self.show_data_button = tk.Button(self.action_frame, 
                                        text="üìã Hi·ªÉn th·ªã s·ªë li·ªáu", 
                                        command=self.show_data, 
                                        bg="#003087", 
                                        fg="white", 
                                        font=("Arial", 11), 
                                        width=15)
        self.show_data_button.pack(side=tk.LEFT, padx=5)
        self.show_data_button.bind("<Enter>", lambda e: self.show_data_button.config(bg="#004D99"))
        self.show_data_button.bind("<Leave>", lambda e: self.show_data_button.config(bg="#003087"))

        # N√∫t v·∫Ω bi·ªÉu ƒë·ªì
        self.plot_button = tk.Button(self.action_frame, 
                                   text="üìà V·∫Ω bi·ªÉu ƒë·ªì", 
                                   command=self.plot_chart, 
                                   bg="#003087", 
                                   fg="white", 
                                   font=("Arial", 11), 
                                   width=15)
        self.plot_button.pack(side=tk.LEFT, padx=5)
        self.plot_button.bind("<Enter>", lambda e: self.plot_button.config(bg="#004D99"))
        self.plot_button.bind("<Leave>", lambda e: self.plot_button.config(bg="#003087"))

        # N√∫t g·ª≠i b√°o c√°o
        self.send_button = tk.Button(self.action_frame, 
                                   text="üì§ G·ª≠i b√°o c√°o", 
                                   command=self.send_report, 
                                   bg="#003087", 
                                   fg="white", 
                                   font=("Arial", 11), 
                                   width=15)
        self.send_button.pack(side=tk.LEFT, padx=5)
        self.send_button.bind("<Enter>", lambda e: self.send_button.config(bg="#004D99"))
        self.send_button.bind("<Leave>", lambda e: self.send_button.config(bg="#003087"))

        # Thanh ti·∫øn tr√¨nh
        self.progress = ttk.Progressbar(self.action_frame, length=200, mode='indeterminate')
        self.progress.pack(side=tk.LEFT, padx=5)

        # Frame cho b·∫£ng s·ªë li·ªáu
        self.table_frame = tk.Frame(self.main_frame, bg="#FFFFFF")
        self.table_frame.pack(fill=tk.BOTH, expand=True, pady=10)

        # Treeview cho b·∫£ng s·ªë li·ªáu
        self.tree = ttk.Treeview(self.table_frame, show="headings", height=10)
        self.tree_scroll = ttk.Scrollbar(self.table_frame, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=self.tree_scroll.set)
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.tree_scroll.pack(side=tk.RIGHT, fill=tk.Y)

        # C·∫≠p nh·∫≠t b·ªô l·ªçc ban ƒë·∫ßu
        self.update_filters()

    def load_data(self, file_path):
        """ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON"""
        try:
            if os.path.exists(file_path):
                with open(file_path, "r", encoding="utf-8") as f:
                    return json.load(f)
            return []
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file {file_path}: {str(e)}")
            return []

    def update_filters(self, event=None):
        """C·∫≠p nh·∫≠t b·ªô l·ªçc d·ª±a tr√™n lo·∫°i b√°o c√°o"""
        report_type = self.report_type_combobox.get()
        if "Tr√≤n" in report_type:
            self.start_date.grid_remove()
            self.end_date.grid_remove()
            self.category_combobox.grid_remove()
            self.status_combobox.grid()
        elif "C·ªôt" in report_type:
            self.start_date.grid_remove()
            self.end_date.grid_remove()
            self.status_combobox.grid_remove()
            self.category_combobox.grid()
        else:  # ƒê∆∞·ªùng
            self.start_date.grid()
            self.end_date.grid()
            self.status_combobox.grid_remove()
            self.category_combobox.grid_remove()

    def show_data(self):
        """Hi·ªÉn th·ªã s·ªë li·ªáu trong b·∫£ng Treeview"""
        self.progress.start()
        report_type = self.report_type_combobox.get()
        self.tree.delete(*self.tree.get_children())

        if report_type == "Bi·ªÉu ƒë·ªì Tr√≤n - Tr·∫°ng th√°i thi·∫øt b·ªã":
            # ƒê·ªçc d·ªØ li·ªáu thi·∫øt b·ªã
            data = self.load_data(DATA_FILE)
            if not data:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu thi·∫øt b·ªã")
                self.progress.stop()
                return

            # ƒê·∫øm s·ªë l∆∞·ª£ng thi·∫øt b·ªã theo tr·∫°ng th√°i
            status_counts = {}
            selected_status = self.status_combobox.get()
            for item in data:
                trang_thai = item.get("trang_thai", "Kh√¥ng x√°c ƒë·ªãnh") if isinstance(item, dict) else item[2] if len(item) > 2 else "Kh√¥ng x√°c ƒë·ªãnh"
                if selected_status == "T·∫•t c·∫£" or trang_thai == selected_status:
                    status_counts[trang_thai] = status_counts.get(trang_thai, 0) + 1

            # C·∫•u h√¨nh Treeview
            self.tree["columns"] = ("Tr·∫°ng th√°i", "S·ªë l∆∞·ª£ng")
            self.tree.heading("Tr·∫°ng th√°i", text="Tr·∫°ng th√°i")
            self.tree.heading("S·ªë l∆∞·ª£ng", text="S·ªë l∆∞·ª£ng")
            self.tree.column("Tr·∫°ng th√°i", width=200)
            self.tree.column("S·ªë l∆∞·ª£ng", width=100)

            # Th√™m d·ªØ li·ªáu v√†o Treeview
            for status, count in status_counts.items():
                self.tree.insert("", "end", values=(status, count))

        elif report_type == "Bi·ªÉu ƒë·ªì C·ªôt - S·ªë l∆∞·ª£ng theo lo·∫°i thi·∫øt b·ªã":
            # ƒê·ªçc d·ªØ li·ªáu thi·∫øt b·ªã
            data = self.load_data(DATA_FILE)
            categories = self.load_data(CATEGORY_FILE)
            if not data:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu thi·∫øt b·ªã")
                self.progress.stop()
                return

            # ƒê·∫øm s·ªë l∆∞·ª£ng thi·∫øt b·ªã theo lo·∫°i
            type_counts = {cat: 0 for cat in categories}
            type_counts["Kh√¥ng x√°c ƒë·ªãnh"] = 0
            selected_category = self.category_combobox.get()
            for item in data:
                loai = item.get("loai", "Kh√¥ng x√°c ƒë·ªãnh") if isinstance(item, dict) else item[5] if len(item) > 5 else "Kh√¥ng x√°c ƒë·ªãnh"
                if selected_category == "T·∫•t c·∫£" or loai == selected_category:
                    type_counts[loai] = type_counts.get(loai, 0) + 1

            # C·∫•u h√¨nh Treeview
            self.tree["columns"] = ("Lo·∫°i thi·∫øt b·ªã", "S·ªë l∆∞·ª£ng")
            self.tree.heading("Lo·∫°i thi·∫øt b·ªã", text="Lo·∫°i thi·∫øt b·ªã")
            self.tree.heading("S·ªë l∆∞·ª£ng", text="S·ªë l∆∞·ª£ng")
            self.tree.column("Lo·∫°i thi·∫øt b·ªã", width=200)
            self.tree.column("S·ªë l∆∞·ª£ng", width=100)

            # Th√™m d·ªØ li·ªáu v√†o Treeview
            for category, count in type_counts.items():
                if count > 0:
                    self.tree.insert("", "end", values=(category, count))

        elif report_type == "Bi·ªÉu ƒë·ªì ƒê∆∞·ªùng - T·∫ßn su·∫•t qu√©t m√£":
            # ƒê·ªçc d·ªØ li·ªáu l·ªãch s·ª≠ qu√©t
            history = self.load_data(HISTORY_FILE)
            if not history:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ qu√©t")
                self.progress.stop()
                return

            # L·ªçc theo kho·∫£ng th·ªùi gian
            start_date = self.start_date.get_date()
            end_date = self.end_date.get_date()
            date_counts = {}
            for record in history:
                record_date = datetime.strptime(record["thoi_gian"], "%Y-%m-%d %H:%M:%S").date()
                if start_date <= record_date <= end_date:
                    date_counts[record_date] = date_counts.get(record_date, 0) + 1

            # C·∫•u h√¨nh Treeview
            self.tree["columns"] = ("Ng√†y", "S·ªë l·∫ßn qu√©t")
            self.tree.heading("Ng√†y", text="Ng√†y")
            self.tree.heading("S·ªë l·∫ßn qu√©t", text="S·ªë l·∫ßn qu√©t")
            self.tree.column("Ng√†y", width=200)
            self.tree.column("S·ªë l·∫ßn qu√©t", width=100)

            # Th√™m d·ªØ li·ªáu v√†o Treeview
            for date, count in sorted(date_counts.items()):
                self.tree.insert("", "end", values=(date.strftime("%Y-%m-%d"), count))

        self.progress.stop()

    def plot_chart(self):
        """V·∫Ω bi·ªÉu ƒë·ªì d·ª±a tr√™n lo·∫°i b√°o c√°o ƒë∆∞·ª£c ch·ªçn"""
        self.progress.start()
        report_type = self.report_type_combobox.get()
        sns.set_style("whitegrid")
        plt.figure(figsize=(8, 6))

        if report_type == "Bi·ªÉu ƒë·ªì Tr√≤n - Tr·∫°ng th√°i thi·∫øt b·ªã":
            # ƒê·ªçc d·ªØ li·ªáu thi·∫øt b·ªã
            data = self.load_data(DATA_FILE)
            if not data:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu thi·∫øt b·ªã")
                self.progress.stop()
                return

            # ƒê·∫øm s·ªë l∆∞·ª£ng thi·∫øt b·ªã theo tr·∫°ng th√°i
            status_counts = {}
            selected_status = self.status_combobox.get()
            for item in data:
                trang_thai = item.get("trang_thai", "Kh√¥ng x√°c ƒë·ªãnh") if isinstance(item, dict) else item[2] if len(item) > 2 else "Kh√¥ng x√°c ƒë·ªãnh"
                if selected_status == "T·∫•t c·∫£" or trang_thai == selected_status:
                    status_counts[trang_thai] = status_counts.get(trang_thai, 0) + 1

            if not status_counts:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc")
                self.progress.stop()
                return

            # V·∫Ω bi·ªÉu ƒë·ªì tr√≤n
            labels = list(status_counts.keys())
            sizes = list(status_counts.values())
            plt.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, colors=sns.color_palette("pastel"))
            plt.title("Ph√¢n b·ªë tr·∫°ng th√°i thi·∫øt b·ªã", fontsize=14)

        elif report_type == "Bi·ªÉu ƒë·ªì C·ªôt - S·ªë l∆∞·ª£ng theo lo·∫°i thi·∫øt b·ªã":
            # ƒê·ªçc d·ªØ li·ªáu thi·∫øt b·ªã
            data = self.load_data(DATA_FILE)
            categories = self.load_data(CATEGORY_FILE)
            if not data:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu thi·∫øt b·ªã")
                self.progress.stop()
                return

            # ƒê·∫øm s·ªë l∆∞·ª£ng thi·∫øt b·ªã theo lo·∫°i
            type_counts = {cat: 0 for cat in categories}
            type_counts["Kh√¥ng x√°c ƒë·ªãnh"] = 0
            selected_category = self.category_combobox.get()
            for item in data:
                loai = item.get("loai", "Kh√¥ng x√°c ƒë·ªãnh") if isinstance(item, dict) else item[5] if len(item) > 5 else "Kh√¥ng x√°c ƒë·ªãnh"
                if selected_category == "T·∫•t c·∫£" or loai == selected_category:
                    type_counts[loai] = type_counts.get(loai, 0) + 1

            # Lo·∫°i b·ªè c√°c lo·∫°i kh√¥ng c√≥ thi·∫øt b·ªã
            type_counts = {k: v for k, v in type_counts.items() if v > 0}

            if not type_counts:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc")
                self.progress.stop()
                return

            # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt
            plt.bar(type_counts.keys(), type_counts.values(), color=sns.color_palette("muted"))
            plt.title("S·ªë l∆∞·ª£ng thi·∫øt b·ªã theo lo·∫°i", fontsize=14)
            plt.xlabel("Lo·∫°i thi·∫øt b·ªã", fontsize=12)
            plt.ylabel("S·ªë l∆∞·ª£ng", fontsize=12)
            plt.xticks(rotation=45, ha="right")

        elif report_type == "Bi·ªÉu ƒë·ªì ƒê∆∞·ªùng - T·∫ßn su·∫•t qu√©t m√£":
            # ƒê·ªçc d·ªØ li·ªáu l·ªãch s·ª≠ qu√©t
            history = self.load_data(HISTORY_FILE)
            if not history:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ qu√©t")
                self.progress.stop()
                return

            # L·ªçc theo kho·∫£ng th·ªùi gian
            start_date = self.start_date.get_date()
            end_date = self.end_date.get_date()
            date_counts = {}
            for record in history:
                record_date = datetime.strptime(record["thoi_gian"], "%Y-%m-%d %H:%M:%S").date()
                if start_date <= record_date <= end_date:
                    date_counts[record_date] = date_counts.get(record_date, 0) + 1

            if not date_counts:
                messagebox.showwarning("C·∫£nh b√°o", "Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p v·ªõi b·ªô l·ªçc")
                self.progress.stop()
                return

            # V·∫Ω bi·ªÉu ƒë·ªì ƒë∆∞·ªùng
            sorted_dates = sorted(date_counts.keys())
            counts = [date_counts[date] for date in sorted_dates]
            plt.plot([date.strftime("%Y-%m-%d") for date in sorted_dates], counts, marker='o', color=sns.color_palette("deep")[0])
            plt.title("T·∫ßn su·∫•t qu√©t m√£ QR theo ng√†y", fontsize=14)
            plt.xlabel("Ng√†y", fontsize=12)
            plt.ylabel("S·ªë l·∫ßn qu√©t", fontsize=12)
            plt.xticks(rotation=45)

        # L∆∞u bi·ªÉu ƒë·ªì v√†o file
        plt.tight_layout()
        plt.savefig(OUTPUT_CHART, dpi=300, bbox_inches="tight")
        plt.show()
        self.progress.stop()

        # T·∫°o PDF b√°o c√°o
        self.create_pdf_report()

    def create_pdf_report(self):
        """T·∫°o file PDF ch·ª©a bi·ªÉu ƒë·ªì v√† b·∫£ng s·ªë li·ªáu"""
        report_type = self.report_type_combobox.get()
        doc = SimpleDocTemplate(OUTPUT_PDF, pagesize=A4)
        elements = []
        styles = getSampleStyleSheet()

        # Ti√™u ƒë·ªÅ
        elements.append(Paragraph("B√°o C√°o Qu·∫£n L√Ω Ph√≤ng Lab", styles['Title']))
        elements.append(Spacer(1, 12))

        # Th√¥ng tin b√°o c√°o
        elements.append(Paragraph(f"Lo·∫°i b√°o c√°o: {report_type}", styles['Normal']))
        elements.append(Paragraph(f"Ng√†y t·∫°o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal']))
        elements.append(Spacer(1, 12))

        # Th√™m bi·ªÉu ƒë·ªì
        if os.path.exists(OUTPUT_CHART):
            img = Image(OUTPUT_CHART, width=400, height=300)
            elements.append(img)
            elements.append(Spacer(1, 12))

        # Th√™m b·∫£ng s·ªë li·ªáu
        if report_type == "Bi·ªÉu ƒë·ªì Tr√≤n - Tr·∫°ng th√°i thi·∫øt b·ªã":
            data = [["Tr·∫°ng th√°i", "S·ªë l∆∞·ª£ng"]]
            for item in self.tree.get_children():
                data.append(self.tree.item(item)["values"])
        elif report_type == "Bi·ªÉu ƒë·ªì C·ªôt - S·ªë l∆∞·ª£ng theo lo·∫°i thi·∫øt b·ªã":
            data = [["Lo·∫°i thi·∫øt b·ªã", "S·ªë l∆∞·ª£ng"]]
            for item in self.tree.get_children():
                data.append(self.tree.item(item)["values"])
        else:
            data = [["Ng√†y", "S·ªë l·∫ßn qu√©t"]]
            for item in self.tree.get_children():
                data.append(self.tree.item(item)["values"])

        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        elements.append(table)

        # L∆∞u PDF
        doc.build(elements)
        messagebox.showinfo("Th√†nh c√¥ng", f"B√°o c√°o PDF ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°i {OUTPUT_PDF}")

    async def send_telegram(self):
        """G·ª≠i b√°o c√°o qua Telegram (gi·∫£ l·∫≠p ho·∫∑c th·ª±c t·∫ø n·∫øu c√≥ API key)"""
        # Thay th·∫ø b·∫±ng API key v√† chat ID th·ª±c t·∫ø
        TELEGRAM_BOT_TOKEN = "8166847649:AAHkwscQjJr0emqQ61CUeU_6RobCMN0df_s"
        TELEGRAM_CHAT_ID = "6553772266"

        if TELEGRAM_BOT_TOKEN == "8166847649:AAHkwscQjJr0emqQ61CUeU_6RobCMN0df_s":
            messagebox.showinfo("Gi·∫£ l·∫≠p", "G·ª≠i b√°o c√°o qua Telegram (gi·∫£ l·∫≠p)!")
            return

        try:
            bot = telegram.Bot(token=TELEGRAM_BOT_TOKEN)
            async with bot:
                # G·ª≠i bi·ªÉu ƒë·ªì
                with open(OUTPUT_CHART, 'rb') as chart_file:
                    await bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=chart_file, caption="B√°o c√°o qu·∫£n l√Ω ph√≤ng lab")
                # G·ª≠i PDF
                with open(OUTPUT_PDF, 'rb') as pdf_file:
                    await bot.send_document(chat_id=TELEGRAM_CHAT_ID, document=pdf_file, caption="B√°o c√°o chi ti·∫øt")
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ g·ª≠i b√°o c√°o qua Telegram!")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o qua Telegram: {str(e)}")

    def send_report(self):
        """G·ª≠i b√°o c√°o qua Telegram v√† hi·ªÉn th·ªã th√¥ng b√°o"""
        if not os.path.exists(OUTPUT_CHART) or not os.path.exists(OUTPUT_PDF):
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng t·∫°o bi·ªÉu ƒë·ªì v√† b√°o c√°o tr∆∞·ªõc khi g·ª≠i!")
            return

        # Ch·∫°y h√†m g·ª≠i Telegram b·∫•t ƒë·ªìng b·ªô
        loop = asyncio.get_event_loop()
        loop.run_until_complete(self.send_telegram())

if __name__ == "__main__":
    root = tk.Tk()
    app = ReportGeneratorApp(root)
    root.mainloop()